{"version":3,"sources":["youWin.gif","youLose.gif","FirebaseConfig.js","PlayingCard.js","CardsAtRisk.js","StatsPanel.js","Cards.js","App.js","FirebaseAuth.js","serviceWorker.js","index.js"],"names":["module","exports","require","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","firebase","initializeApp","PlayingCard","props","className","Card","Body","Text","curCard","name","CardsAtRisk","list","loseList","map","card","index","StatsPanel","firstGame","displayName","Math","floor","wins","totalGames","Cards","componentDidMount","state","database","ref","uid","once","snapshot","exists","setState","val","play","myCurCard","myCards","otherCurCard","otherCards","myCard","otherCard","myLoseList","otherLoseList","slice","length","isPlay","isNext","next","winList","myDeckLength","otherDeckLength","value","concat","end","myCurCards","otherCurCards","result","message","newWins","newGames","didWin","isPlaying","set","restart","cards","this","Button","variant","onClick","disabled","signOut","src","youWin","alt","youLose","Component","App","componentWillMount","deck","deckIndex","i","commonName","cardValue","shuffle","j","random","temp","user","signInWithGoogle","firebaseAppAuth","auth","providers","googleProvider","GoogleAuthProvider","withFirebaseAuth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","FirebaseAuth","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0ffaee47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/youWin.5456c212.gif\";","module.exports = __webpack_public_path__ + \"static/media/youLose.b8a303d1.gif\";","import firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nrequire('dotenv').config();\r\nvar key = process.env.REACT_APP_KEY;\r\n\r\nconst config = {\r\n    apiKey: key,\r\n    authDomain: \"wargame-e3497.firebaseapp.com\",\r\n    databaseURL: \"https://wargame-e3497.firebaseio.com\",\r\n    projectId: \"wargame-e3497\",\r\n    storageBucket: \"wargame-e3497.appspot.com\",\r\n    messagingSenderId: \"190741463412\",\r\n    appId: \"1:190741463412:web:9c335f4eb4602ec89b6c21\",\r\n    measurementId: \"G-RBSMEN97MD\"\r\n};\r\n\r\nvar firebaseApp = firebase.initializeApp(config)\r\n\r\nexport default firebaseApp;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nconst PlayingCard = props => {\r\n    return (\r\n        <div className=\"Card\">\r\n        <Card >\r\n            <Card.Body>\r\n                <Card.Text>\r\n                        <em>{props.curCard.name}</em>\r\n                </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayingCard;\r\n","import React from 'react';\r\nimport PlayingCard from './PlayingCard';\r\n\r\nconst CardsAtRisk = props => {\r\n    var list = props.loseList.map((card, index) => {\r\n        return ( <PlayingCard className=\"riskCard\" curCard={card} /> )\r\n    })\r\n    return (\r\n        <div className=\"CardsAtRisk\"> {list} </div>\r\n    )\r\n}\r\n\r\nexport default CardsAtRisk;","import React from 'react';\r\n\r\nconst StatsPanel = props => {\r\n\r\n    return (\r\n        <div className=\"StatsPanel\">\r\n            {props.firstGame ?\r\n                <h6>Hi {props.displayName}, you have yet to play a game.</h6> :\r\n                <h6>Hi {props.displayName}, your win percentage is {Math.floor(props.wins / props.totalGames * 100)}% </h6>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatsPanel;","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport CardsAtRisk from './CardsAtRisk.js';\r\nimport PlayingCard from './PlayingCard.js';\r\nimport StatsPanel from './StatsPanel.js';\r\nimport './Cards.css';\r\nimport * as youWin from './youWin.gif';\r\nimport * as youLose from './youLose.gif';\r\n\r\nexport default class Cards extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // myCards: this.props.cards.slice(0, 26),\r\n            // otherCards: this.props.cards.slice(26, 53),\r\n            otherCards: this.props.cards.slice(0, 1),\r\n            myCards: this.props.cards.slice(1, 53),\r\n            myCard: \"\",\r\n            otherCard: \"\",\r\n            isPlay: true,\r\n            isNext: false,\r\n            myLoseList: [],\r\n            otherLoseList: [],\r\n            result: \"\",\r\n            wins: 0,\r\n            totalGames: 0,\r\n            firstGame: true,\r\n            database: this.props.database,\r\n            isPlaying: true,\r\n            didWin: false,\r\n        }\r\n    }\r\n\r\n    // this is necessary because passing it as a prop through app does not load the data correctly from firebase\r\n    componentDidMount = () => {\r\n        this.state.database.ref('wins/' + this.props.uid).once('value', snapshot => {\r\n            if (snapshot.exists()) {\r\n                this.setState({ wins: snapshot.val() })\r\n            }\r\n        })\r\n        this.state.database.ref('totalGames/' + this.props.uid).once('value', snapshot => {\r\n            if (snapshot.exists()) {\r\n                this.setState({ totalGames: snapshot.val(), firstGame: false })\r\n            }\r\n        })\r\n    }\r\n\r\n    play = () => {\r\n        var myCurCard = this.state.myCards[0];\r\n        var otherCurCard = this.state.otherCards[0];\r\n        this.setState({\r\n            myCard: myCurCard,\r\n            otherCard: otherCurCard,\r\n            myLoseList: [myCurCard],\r\n            otherLoseList: [otherCurCard],\r\n            myCards: this.state.myCards.slice(1, this.state.myCards.length),\r\n            otherCards: this.state.otherCards.slice(1, this.state.otherCards.length),\r\n            isPlay: false,\r\n            isNext: true,\r\n        })\r\n    }\r\n\r\n    next = () => {\r\n        let winList;\r\n        let myDeckLength = this.state.myCards.length;\r\n        let otherDeckLength = this.state.otherCards.length;\r\n        if (this.state.myCard.value !== this.state.otherCard.value) {\r\n            if (this.state.myCard.value > this.state.otherCard.value) {\r\n                winList = ([...this.state.myCards].concat(this.state.myLoseList)).concat(this.state.otherLoseList);\r\n                myDeckLength = winList.length;\r\n                this.setState({\r\n                    myCards: winList,\r\n                })\r\n            }\r\n            else {\r\n                winList = ([...this.state.otherCards].concat(this.state.otherLoseList)).concat(this.state.myLoseList);\r\n                otherDeckLength = winList.length;\r\n                this.setState({\r\n                    otherCards: winList,\r\n                })\r\n            }\r\n            this.setState({\r\n                isPlay: true,\r\n                isNext: false,\r\n                myLoseList: [],\r\n                otherLoseList: [],\r\n            })\r\n        }\r\n        else {\r\n            if (this.state.myCards.length < 4) { this.end(\"lose\"); }\r\n            else if (this.state.otherCards.length < 4) { this.end(\"win\"); }\r\n            else {\r\n                var myCurCard = this.state.myCards[3];\r\n                var otherCurCard = this.state.otherCards[3];\r\n                var myCurCards = [...this.state.myCards];\r\n                var otherCurCards = [...this.state.otherCards];\r\n                this.setState({\r\n                    myCard: myCurCard,\r\n                    otherCard: otherCurCard,\r\n                    myLoseList: [...this.state.myLoseList].concat(myCurCards.slice(0, 4)),\r\n                    otherLoseList: [...this.state.otherLoseList].concat(otherCurCards.slice(0, 4)),\r\n                    myCards: this.state.myCards.slice(4, myCurCards.length),\r\n                    otherCards: this.state.otherCards.slice(4, otherCurCards.length),\r\n                })\r\n            }\r\n        }\r\n        if (myDeckLength === 0) { this.end(\"lose\") }\r\n        if (otherDeckLength === 0) { this.end(\"win\") }\r\n    }\r\n\r\n    end = result => {\r\n        let message;\r\n        var newWins = this.state.wins + 1;\r\n        var newGames = this.state.totalGames + 1;\r\n        if (result === \"win\") {\r\n            message = \"Congratulations, you won the war!\";\r\n            this.setState({ wins: newWins, totalGames: newGames, didWin: true })\r\n        }\r\n        else {\r\n            message = \"Sorry, you lost the war :(\";\r\n            this.setState({ totalGames: this.state.totalGames + 1, didWin: false })\r\n        }\r\n        this.setState({\r\n            result: message,\r\n            isNext: true,\r\n            isPlay: true,\r\n            firstGame: false,\r\n            isPlaying: false,\r\n        })\r\n        this.state.database.ref('wins/' + this.props.uid).set(newWins)\r\n        this.state.database.ref('totalGames/' + this.props.uid).set(newGames)\r\n    }\r\n\r\n    restart = () => {\r\n        this.props.restart();\r\n        this.setState({\r\n            myCards: this.props.cards.slice(0, 26),\r\n            otherCards: this.props.cards.slice(26, 53),\r\n            myCard: \"\",\r\n            otherCard: \"\",\r\n            isPlay: true,\r\n            isNext: false,\r\n            myLoseList: [],\r\n            otherLoseList: [],\r\n            result: \"\",\r\n            firstGame: false,\r\n            totalGames: this.state.totalGames + 1,\r\n            isPlaying: true,\r\n        })\r\n        var newGames = this.state.totalGames + 1;\r\n        this.state.database.ref('totalGames/' + this.props.uid).set(newGames)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"CardPanel\">\r\n                <StatsPanel\r\n                    wins={this.state.wins}\r\n                    totalGames={this.state.totalGames}\r\n                    firstGame={this.state.firstGame}\r\n                    displayName={this.props.displayName} />\r\n                <div className=\"buttons\">\r\n                    <Button className=\"restartButton\" variant=\"danger\" onClick={this.restart}>Restart</Button>\r\n                    <Button className=\"button\" onClick={this.play} disabled={this.state.isNext}>Flip Card</Button>\r\n                    <Button className=\"button\" variant=\"success\" onClick={this.next} disabled={this.state.isPlay}>Continue</Button>\r\n                    <Button className=\"signOutButton\" variant=\"danger\" onClick={this.props.signOut}>Sign out</Button>\r\n                </div>\r\n                <h5 className=\"congrats\">{this.state.result} </h5>\r\n                <div className=\"Cards\">\r\n                    <p className=\"numCards\"> Number of Cards in My Deck: {this.state.myCards.length}</p>\r\n                    <div className=\"CurrentCard\">\r\n                        <p className=\"textColor\">My Current Card</p>\r\n                        <PlayingCard className=\"CurPlayingCard\"\r\n                            curCard={this.state.myCard} />\r\n                    </div>\r\n                    <div className=\"CurrentCard\">\r\n                        <p className=\"textColor\">Opponent's Current Card</p>\r\n                        <PlayingCard className=\"CurPlayingCard\"\r\n                            curCard={this.state.otherCard} />\r\n                    </div>\r\n                    <p className=\"numCards\">Number of Cards in Opponent's Deck: {this.state.otherCards.length}</p>\r\n                </div>\r\n                {(this.state.isPlaying) ?\r\n                    <div className=\"Risk\">\r\n                        <div className=\"atRisk\">\r\n                            <p className=\"textColor\">My Cards at Risk</p>\r\n                            <CardsAtRisk loseList={this.state.myLoseList} />\r\n                        </div>\r\n                        <div className=\"atRisk\">\r\n                            <p className=\"textColor\">Opponent's Cards at Risk</p>\r\n                            <CardsAtRisk loseList={this.state.otherLoseList} />\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    (this.state.didWin) ? \r\n                    <img src={youWin} alt=\"You won\" />\r\n                    : <img src={youLose} alt=\"You lost\" />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Cards from './Cards.js';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport firebase from './FirebaseConfig.js';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cards: [],\r\n      database: firebase.database(),\r\n    }\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    let deck = [];\r\n    let deckIndex = 0;\r\n    for (let i = 13; i > 0; i--) {\r\n      let commonName = i;\r\n      let cardValue = i;\r\n      if (i === 1) { commonName = \"Ace\"; cardValue = 14 }\r\n      if (i === 11) { commonName = \"Jack\" }\r\n      if (i === 12) { commonName = \"Queen\" }\r\n      if (i === 13) { commonName = \"King\" }\r\n\r\n      deck[deckIndex] = {\r\n        value: cardValue,\r\n        name: commonName + \" of Diamonds\",\r\n        index: deckIndex\r\n      }\r\n      deckIndex++;\r\n      deck[deckIndex] = {\r\n        value: cardValue,\r\n        name: commonName + \" of Clubs\",\r\n        index: deckIndex\r\n      }\r\n      deckIndex++;\r\n      deck[deckIndex] = {\r\n        value: cardValue,\r\n        name: commonName + \" of Hearts\",\r\n        index: deckIndex\r\n      }\r\n      deckIndex++;\r\n      deck[deckIndex] = {\r\n        value: cardValue,\r\n        name: commonName + \" of Spades\",\r\n        index: deckIndex\r\n      }\r\n      deckIndex++;\r\n    }\r\n    var shuffle = [...deck];\r\n    for (let i = (shuffle.length - 1); i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i)\r\n      const temp = shuffle[i]\r\n      shuffle[i] = shuffle[j]\r\n      shuffle[j] = temp\r\n    }\r\n    this.setState({ cards: shuffle })\r\n  }\r\n\r\n  restart = () => {\r\n    var shuffle = [...this.state.cards];\r\n    for (let i = (shuffle.length - 1); i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i)\r\n      const temp = shuffle[i]\r\n      shuffle[i] = shuffle[j]\r\n      shuffle[j] = temp\r\n    }\r\n    this.setState({ cards: shuffle })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      user,\r\n      signOut,\r\n      signInWithGoogle,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>A GAME OF LUCK: <span className=\"war\">WAR</span></h1>\r\n        {\r\n          user\r\n            ? <div></div>\r\n            : <p className=\"signIn\">Please sign in.</p>\r\n        }\r\n        {\r\n          user ?\r\n          <Cards\r\n          cards={this.state.cards}\r\n          restart={this.restart}\r\n          database={this.state.database}\r\n          uid={user.uid} \r\n          displayName={user.displayName} \r\n          signOut={signOut}/>\r\n          : <Button onClick={signInWithGoogle} className=\"signInButton\">Sign in with Google</Button>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}","import withFirebaseAuth from 'react-with-firebase-auth'\r\nimport * as firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport firebaseApp from './FirebaseConfig';\r\nimport App from './App.js'\r\n\r\nconst firebaseAppAuth = firebaseApp.auth();\r\nconst providers = {\r\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\r\n};\r\n\r\nexport default withFirebaseAuth({\r\n    providers,\r\n    firebaseAppAuth,\r\n  })(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport FirebaseAuth from './FirebaseAuth'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <FirebaseAuth />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}