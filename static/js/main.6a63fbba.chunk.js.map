{"version":3,"sources":["Cards.js","StatsPanel.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","componentDidMount","setState","myCards","cards","slice","otherCards","myCard","otherCard","myLoseList","otherLoseList","play","myCurCard","state","otherCurCard","length","isPlay","isNext","next","winList","console","log","concat","end","myCurCards","myLength","otherCurCards","otherLength","result","className","Button","onClick","this","disabled","Component","StatsPanel","App","componentWillMount","shuffle","i","j","Math","floor","random","temp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6a63fbba.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class Cards extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            myCards: [],\r\n            otherCards: [],\r\n            myCard: \"\",\r\n            otherCard: \"\",\r\n            isPlay: true,\r\n            isNext: false,\r\n            myLoseList: [],\r\n            otherLoseList: [],\r\n            result: \"\",\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({\r\n            myCards: this.props.cards.slice(0, 26),\r\n            otherCards: this.props.cards.slice(26, 53),\r\n            myCard: \"\",\r\n            otherCard: \"\",\r\n            myLoseList: [],\r\n            otherLoseList: [],\r\n        })\r\n    }\r\n\r\n    play = () => {\r\n        var myCurCard = this.state.myCards[0] //this.state.myLoseList.length];  // must set loseList to 0 after next\r\n        var otherCurCard = this.state.otherCards[0] //this.state.otherLoseList.length];\r\n        this.setState({\r\n            myCard: myCurCard,\r\n            otherCard: otherCurCard,\r\n            myLoseList: [myCurCard],\r\n            otherLoseList: [otherCurCard],\r\n            myCards: this.state.myCards.slice(1, this.state.myCards.length),\r\n            otherCards: this.state.otherCards.slice(1, this.state.otherCards.length),\r\n            isPlay: false,\r\n            isNext: true,\r\n        })\r\n    }\r\n\r\n    next = () => {\r\n        let winList;\r\n        console.log(this.state)\r\n        if (this.state.myCard > this.state.otherCard) {\r\n            winList = ([...this.state.myCards].concat(this.state.myLoseList)).concat(this.state.otherLoseList);\r\n            this.setState({\r\n                myCards: winList,\r\n                isPlay: true,\r\n                isNext: false,\r\n                myLoseList: [],\r\n                otherLoseList: [],\r\n            })\r\n        }\r\n        else if (this.state.myCard < this.state.otherCard) {\r\n            winList = ([...this.state.otherCards].concat(this.state.otherLoseList)).concat(this.state.myLoseList);\r\n            this.setState({\r\n                otherCards: winList,\r\n                isPlay: true,\r\n                isNext: false,\r\n                myLoseList: [],\r\n                otherLoseList: [],\r\n            })\r\n        }\r\n        else {\r\n            if (this.state.myCards.length < 4) {\r\n                this.end(\"lose\");\r\n            }\r\n            else if (this.state.otherCards.length < 4) {\r\n                this.end(\"win\");\r\n            }\r\n            else {\r\n                var myCurCard = this.state.myCards[3];\r\n                var otherCurCard = this.state.otherCards[3];\r\n                var myCurCards = [...this.state.myCards];\r\n                var myLength = myCurCards.length;\r\n                var otherCurCards = [...this.state.otherCards];\r\n                var otherLength = otherCurCards.length;\r\n                this.setState({\r\n                    myCard: myCurCard,\r\n                    otherCard: otherCurCard,\r\n                    myLoseList: [...this.state.myLoseList].concat(myCurCards.slice(0, 4)),\r\n                    otherLoseList: [...this.state.otherLoseList].concat(otherCurCards.slice(0, 4)),\r\n                    myCards: this.state.myCards.slice(4, myLength),\r\n                    otherCards: this.state.otherCards.slice(4, otherLength),\r\n                    // isNext: false,\r\n                    // isPlay: true,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    end = result => {\r\n        if (result === \"win\") {\r\n            this.setState({\r\n                result: \"win\",\r\n                isNext: false,\r\n                isPlay: false\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                result: \"lose\",\r\n                isNext: false,\r\n                isPlay: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"buttons\">\r\n                    <Button onClick={this.play} disabled={this.state.isNext}>play</Button>\r\n                    <Button onClick={this.next} disabled={this.state.isPlay}>next</Button>\r\n                </div>\r\n                <div className=\"Cards\">\r\n                    <div className=\"player\">\r\n                        <p>my # cards: {this.state.myCards.length}</p>\r\n                        <p>myCard: {this.state.myCard}</p>\r\n                    </div>\r\n                    <div className=\"player\">\r\n                        <p>other # cards: {this.state.otherCards.length}</p>\r\n                        <p>otherCard: {this.state.otherCard}</p>\r\n                        <p>{this.state.result}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class StatsPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport Cards from './Cards.js';\nimport StatsPanel from './StatsPanel.js';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, \n        8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13]\n    }\n  }\n\n  componentWillMount = () => {\n    var shuffle = [...this.state.cards];\n    for(let i = (shuffle.length-1); i > 0; i--){\n      const j = Math.floor(Math.random() * i)\n      const temp = shuffle[i]\n      shuffle[i] = shuffle[j]\n      shuffle[j] = temp\n    }\n    this.setState({ cards: shuffle })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Welcome to War</h1>\n        <Cards cards={this.state.cards}/>\n        <StatsPanel />\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}